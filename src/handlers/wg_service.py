"""–î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ WireGuard"""

import logging
import os
from contextlib import suppress
from typing import Union

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters.command import Command
from aiogram.types import CallbackQuery, FSInputFile, Message
from pytils.numeral import get_plural

import text
from core import exceptions as exc
from core.config import settings
from core.err import bot_except
from core.metric import async_speed_metric
from db import utils
from db.models import FreezeSteps, UserActivity, UserData, WgConfig
from handlers.utils import find_config, find_user
from kb import get_config_keyboard, remove_config, static_pay_button, why_freezed_button
from wg.utils import WgServerTools

logger = logging.getLogger()
router = Router()
router.message.filter(F.chat.type == "private")


@router.message(Command("me"))
@router.message(Command("config"))
@router.message(F.text.lower().in_(text.me))
@router.callback_query(F.data == "user_configurations")
@async_speed_metric
@bot_except
async def post_user_data(trigger: Union[Message, CallbackQuery]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        trigger (Union[Message, CallbackQuery]): –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É.

    –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö —Å–ø–∏—Å–æ–∫. –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.
    –¢–∞–∫–∂–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.
    """
    user_data: UserData = await find_user(trigger, configs=True)
    if not user_data:
        return
    else:
        create_cfg_btn, create_output_cfg_btn = get_config_keyboard()

        if user_data.configs:
            await getattr(trigger, "message", trigger).answer("–í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")

            user_data.configs.sort(key=lambda conf: conf.id)
            for i, config in enumerate(user_data.configs, 1):
                if config.user_private_key:
                    config_text = f"({i}/{settings.acceptable_config[user_data.stage]}) - Name: {config.name} | id: {config.user_private_key[:4]}"

                    if config.freeze != FreezeSteps.no:
                        config_text = f'ü•∂<b>FREEZED</b>‚ùÑÔ∏è\n<span class="tg-spoiler">{config_text}</span>'

                        await getattr(trigger, "message", trigger).answer(
                            config_text, reply_markup=why_freezed_button
                        )
                    else:
                        await getattr(trigger, "message", trigger).answer(
                            config_text, reply_markup=create_output_cfg_btn
                        )

        if user_data.active == UserActivity.active:
            cfg_number = settings.acceptable_config[user_data.stage] - len(
                user_data.configs
            )

            if cfg_number <= 0:
                await getattr(trigger, "message", trigger).answer(
                    "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.",
                    reply_markup=static_pay_button,
                )
            else:
                await getattr(trigger, "message", trigger).answer(
                    f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ {get_plural(cfg_number, '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π')}",
                    reply_markup=create_cfg_btn,
                )
        elif user_data.active == UserActivity.inactive:
            await getattr(trigger, "message", trigger).answer(
                text.UNPAY, reply_markup=static_pay_button
            )


@router.message(Command("create"))
@router.callback_query(F.data == "create_configuration")
@async_speed_metric
@bot_except
async def create_config_data(trigger: Union[Message, CallbackQuery], bot: Bot):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        trigger (Union[Message, CallbackQuery]): –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.
    –í —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        user_data: UserData = await find_user(trigger, configs=True)
        if not user_data:
            return
        elif user_data.active != UserActivity.active:
            raise exc.PayError

        elif len(user_data.configs) < settings.acceptable_config[user_data.stage]:
            wg = WgServerTools()
            conf = await wg.move_user(move="add", user_id=trigger.from_user.id)
            config: WgConfig = await utils.add_wg_config(
                conf, user_id=trigger.from_user.id
            )

        else:
            raise exc.StagePayError

    except exc.DatabaseError:
        await trigger.answer(text=text.DB_ERROR, show_alert=True)
    except exc.WireguardError:
        await trigger.answer(text=text.WG_ERROR, show_alert=True)
    except exc.StagePayError:
        await getattr(trigger, "message", trigger).answer(
            "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.",
            reply_markup=static_pay_button,
        )
        await bot.delete_message(
            trigger.from_user.id, getattr(trigger, "message", trigger).message_id
        )
    except exc.PayError:
        await getattr(trigger, "message", trigger).answer(
            text.UNPAY, reply_markup=static_pay_button
        )
    else:
        create_cfg_btn, create_output_cfg_btn = get_config_keyboard()

        await trigger.answer(text="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞", show_alert=True)
        await getattr(trigger, "message", trigger).answer(
            f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.name} | id: {config.user_private_key[:4]}",
            reply_markup=create_output_cfg_btn,
        )

        with suppress(TelegramBadRequest):
            cfg_number = get_plural(
                settings.acceptable_config[user_data.stage]
                - len(user_data.configs)
                - 1,
                "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π",
            )
            await getattr(trigger, "message", trigger).edit_text(
                f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ {cfg_number}", reply_markup=create_cfg_btn
            )

        if cfg_number.startswith("0"):
            await bot.delete_message(
                trigger.from_user.id, getattr(trigger, "message", trigger).message_id
            )


@router.callback_query(F.data == "remove_config_confirm")
@bot_except
async def remove_config_data_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

    Args:
        callback (CallbackQuery): –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É.
    """

    with suppress(TelegramBadRequest):
        await callback.message.edit_text(
            "–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ –Ω–µ–π –∫ VPN-—Å–µ—Ä–≤–µ—Ä—É. "
            "–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∑–∞–º–µ–Ω–∏—Ç—å –µ–π —Å—Ç–∞—Ä—É—é –≤ vpn-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
            f"\n\n? –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {callback.message.text}",
            reply_markup=remove_config(),
        )


@router.callback_query(F.data == "remove_config_cancel")
@bot_except
async def remove_config_data_cancel(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

    Args:
        callback (CallbackQuery): –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É.
    """
    _, create_output_cfg_btn = get_config_keyboard()

    *_, old_cfg_message = callback.message.text.split("—É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ")

    with suppress(TelegramBadRequest):
        await callback.message.edit_text(
            old_cfg_message, reply_markup=create_output_cfg_btn
        )


@router.callback_query(F.data == "remove_config")
@async_speed_metric
@bot_except
async def remove_config_data(callback: CallbackQuery, bot: Bot):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å WG —Å–µ—Ä–≤–µ—Ä–∞, –∞ –∑–∞—Ç–µ–º –∏–∑ –ë–î.

    Args:
        callback (CallbackQuery): –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É.
    """

    try:
        user_config: WgConfig = await find_config(callback)
        if not user_config:
            return

        wg = WgServerTools()
        await wg.move_user(move="del", server_pubkey=user_config.server_public_key)

        await utils.delete_wg_config(user_config)

    except exc.DatabaseError:
        await callback.answer(text=text.DB_ERROR, show_alert=True)
    except exc.WireguardError:
        await callback.answer(text=text.WG_ERROR, show_alert=True)
    else:
        await callback.answer(text="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
    finally:
        await bot.delete_message(callback.from_user.id, callback.message.message_id)


@router.callback_query(F.data == "create_conf_text")
@async_speed_metric
@bot_except
async def get_config_text(callback: CallbackQuery, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        callback (CallbackQuery): –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —É–¥–æ–±–Ω–æ–º –¥–ª—è —á—Ç–µ–Ω–∏—è.
    """
    user_config: WgConfig = await find_config(callback)
    if not user_config:
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        return

    config = text.get_config_data(user_config)

    await callback.message.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è " + callback.message.text)
    await callback.message.answer(f"<pre>{config}</pre>")


@router.callback_query(F.data == "create_conf_file")
@async_speed_metric
@bot_except
async def get_config_file(callback: CallbackQuery, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        callback (CallbackQuery): –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É.

    –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    """
    user_config: WgConfig = await find_config(callback)
    if not user_config:
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        return

    config = text.get_config_data(user_config)
    config_file = await text.create_config_file(config)

    await callback.message.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è " + callback.message.text)
    await callback.message.answer_document(FSInputFile(config_file, "myVpn.conf"))
    await callback.message.answer(
        "‚ÄºÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞: <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è</b> "
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: –≤ –Ω–µ–º –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ (–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π, —Å–∫–æ–±–æ–∫ ...), "
        "–¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤"
    )
    os.remove(config_file)


@router.callback_query(F.data == "create_conf_qr")
@async_speed_metric
@bot_except
async def get_config_qr(callback: CallbackQuery, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç QR-–∫–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        callback (CallbackQuery): –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É.

    –°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    user_config: WgConfig = await find_config(callback)
    if not user_config:
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        return

    config = text.get_config_data(user_config)
    config_qr = text.create_config_qr(config)

    await callback.message.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è " + callback.message.text)
    await callback.message.answer_photo(
        FSInputFile(config_qr, f"{user_config.name}_wg.conf")
    )
    os.remove(config_qr)
